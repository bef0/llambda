package io.llambda.typegen.writer.compiler

import collection.mutable.StringBuilder

import io.llambda.typegen._
import io.llambda.llvmir

object WriteLlvmCellTypes extends writer.OutputWriter {
  private def defineCellClass(cellClass: CellClass): String = {
    val sourceString = new collection.mutable.StringBuilder

    // Build the description chunks for our comment
    val fieldDescriptions = cellClass.fields map { field =>
      field.fieldType match {
        case PrimitiveFieldType(_, _, "bool")      => s"bool ${field.name}"
        case PrimitiveFieldType(Some(false), _, _) => s"unsigned ${field.name}"
        case PrimitiveFieldType(Some(true), _, _)  => s"signed ${field.name}"
        case _ => field.name
      }
    }

    sourceString ++= "; {" + ("supertype" :: fieldDescriptions).mkString(", ") + "}\n"

    // Find the LLVM types for our fields
    val fieldLlvmTypes = cellClass.fields map { field =>
      FieldTypeToLlvm(field.fieldType)
    }

    // Find the LLVM type pointer to our supertype
    val superLlvmType = cellClass.parentOption.map { parent =>
      llvmir.UserDefinedType(parent.names.llvmName)
    }

    // Define our type
    val allMemberTypes = superLlvmType.toList ++ fieldLlvmTypes
    val cellClassLlvmType = llvmir.StructureType(allMemberTypes)

    sourceString ++= llvmir.UserDefinedType(cellClass.names.llvmName) + " = type " + cellClassLlvmType + "\n"

    // Define our TBAA nodes
    for(metadataDef <- cellClass.fieldTbaaNodes.values) {
      sourceString ++= metadataDef.toIr + "\n"
    }

    sourceString.toString
  }

  def apply(processedTypes: ProcessedTypes): Map[String, String] = {
    val sourceString = new collection.mutable.StringBuilder

    sourceString ++= ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n"
    sourceString ++= ";; This file is generated by typegen. Do not edit manually. ;;\n"
    sourceString ++= ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n"

    for(cellClass <- processedTypes.cellClasses.values if cellClass.visibility.fromCompiler) {
      sourceString ++= "\n"
      sourceString ++= defineCellClass(cellClass)
    }

    Map("compiler/src/main/resources/generated/cellTypes.ll" -> sourceString.toString)
  }
}
