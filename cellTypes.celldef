// The runtime has a UnicodeChar class that provides access to Unicode utility
// methods
fieldtype UnicodeChar : uint32 {
	extern cppname = UnicodeChar;
};

fieldtype ErrorCategory : uint16 {
	extern cppname = ErrorCategory;
};

fieldtype AbstractPort : uint8 {
	extern cppname = AbstractPort;
};

fieldtype DatumHashTree : uint8 {
	extern cppname = DatumHashTree;
};

// C++ has a special ProperList type for known proper lists
cell ListElement;
fieldtype ProperList : ListElement {
	extern cppname = ProperList<AnyCell>;
};

// This is a special type
fieldtype TypeId : uint8 {
	cppname = CellTypeId;
};

// C++ garbage collector defines the meaning of this field
fieldtype GarbageState : uint8 {
	extern cppname = GarbageState;
};

fieldtype State : untypedptr {
	extern cppname = dynamic::State;
};

fieldtype MailboxRef : untypedptr {
	extern cppname = std::weak_ptr<actor::Mailbox>;
};

root cell Any typetag typeId {
	const TypeId typeId;
	// This is GarbageState::GlobalConstant
	const GarbageState gcState = 1;
};

preconstructed cell Unit : Any {
};

abstract cell ListElement : Any {
};

concrete internal cell Pair : ListElement {
	const uint32 listLength;
	const Any* car;
	const Any* cdr;
};

preconstructed cell EmptyList : ListElement {
};

concrete cell String : Any {
	const uint8 inlineByteLength;
};

variant cell InlineString : String {
	const uint8 inlineCharLength;
	const uint8 inlineData[28];
};

variant cell HeapString : String {
	const uint32 heapByteLength;
	const uint32 heapCharLength;
	const SharedByteArray* heapByteArray;
};

concrete cell Symbol : Any {
	const uint8 inlineByteLength;
};

variant cell InlineSymbol : Symbol {
	const uint8 inlineCharLength;
	const uint8 inlineData[28];
};

variant cell HeapSymbol : Symbol {
	const uint32 heapByteLength;
	const uint32 heapCharLength;
	const SharedByteArray* heapByteArray;
};

preconstructed cell Boolean : Any {
};

abstract cell Number : Any {
};

concrete cell Integer : Number {
	const int64 value;
};

concrete cell Flonum : Number {
	const double value;
};

concrete cell Char : Any {
	const UnicodeChar unicodeChar;
};

concrete cell Vector : Any {
	const int64 length;
	const Any** elements;
};

concrete cell Bytevector : Any {
	const int64 length;
	SharedByteArray* byteArray;
};

abstract internal cell RecordLike : Any {
	const bool dataIsInline;
	bool isUndefined;
	const uint32 recordClassId;
	// This is not const as we can store inline data in the pointer itself
	untypedptr recordData;
};

concrete internal cell Procedure : RecordLike {
	uint8 extraData[8];
	const untypedptr entryPoint;
};

// Records are internal because each record class is exposed as its own first-class type in Scheme
concrete internal cell Record : RecordLike {
	uint8 extraData[16];
};

concrete cell ErrorObject : Any {
	const ErrorCategory category;
	const String* message;
	const ProperList* irritants;
};

concrete cell Port : Any {
	const AbstractPort *port;
};

preconstructed cell EofObject : Any {
};

concrete cell Mailbox : Any {
	const MailboxRef mailbox;
};

concrete internal cell HashMap : Any {
	const DatumHashTree *datumHashTree;
};
