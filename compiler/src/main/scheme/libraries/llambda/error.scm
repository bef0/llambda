; This file is automatically generated by generate-error-categories.scm. Do not edit manually.
(define-library (llambda error)
  (import (llambda internal primitives))
  (import (llambda typed))
  (import (llambda nfi))

  (export type-error? arity-error? range-error? utf8-error? divide-by-zero-error? mutate-literal-error? undefined-variable-error? out-of-memory-error? invalid-argument-error? integer-overflow-error? implementation-restriction-error? unclonable-value-error? no-actor-error? expired-escape-procedure-error? ask-timeout-error? match-error? raise-file-error raise-read-error raise-type-error raise-arity-error raise-range-error raise-utf8-error raise-divide-by-zero-error raise-mutate-literal-error raise-undefined-variable-error raise-out-of-memory-error raise-invalid-argument-error raise-integer-overflow-error raise-implementation-restriction-error raise-unclonable-value-error raise-no-actor-error raise-expired-escape-procedure-error raise-ask-timeout-error raise-match-error)
  (begin
    (define-native-library llerror (static-library "ll_llambda_error"))
    (define raise-file-error (world-function llerror "llerror_raise_file_error" (-> <string> <any> * <unit>) noreturn))
    (define raise-read-error (world-function llerror "llerror_raise_read_error" (-> <string> <any> * <unit>) noreturn))
    (define type-error? (native-function llerror "llerror_is_type_error" (-> <any> <native-bool>) nocapture))
    (define raise-type-error (world-function llerror "llerror_raise_type_error" (-> <string> <any> * <unit>) noreturn))
    (define arity-error? (native-function llerror "llerror_is_arity_error" (-> <any> <native-bool>) nocapture))
    (define raise-arity-error (world-function llerror "llerror_raise_arity_error" (-> <string> <any> * <unit>) noreturn))
    (define range-error? (native-function llerror "llerror_is_range_error" (-> <any> <native-bool>) nocapture))
    (define raise-range-error (world-function llerror "llerror_raise_range_error" (-> <string> <any> * <unit>) noreturn))
    (define utf8-error? (native-function llerror "llerror_is_utf8_error" (-> <any> <native-bool>) nocapture))
    (define raise-utf8-error (world-function llerror "llerror_raise_utf8_error" (-> <string> <any> * <unit>) noreturn))
    (define divide-by-zero-error? (native-function llerror "llerror_is_divide_by_zero_error" (-> <any> <native-bool>) nocapture))
    (define raise-divide-by-zero-error (world-function llerror "llerror_raise_divide_by_zero_error" (-> <string> <any> * <unit>) noreturn))
    (define mutate-literal-error? (native-function llerror "llerror_is_mutate_literal_error" (-> <any> <native-bool>) nocapture))
    (define raise-mutate-literal-error (world-function llerror "llerror_raise_mutate_literal_error" (-> <string> <any> * <unit>) noreturn))
    (define undefined-variable-error? (native-function llerror "llerror_is_undefined_variable_error" (-> <any> <native-bool>) nocapture))
    (define raise-undefined-variable-error (world-function llerror "llerror_raise_undefined_variable_error" (-> <string> <any> * <unit>) noreturn))
    (define out-of-memory-error? (native-function llerror "llerror_is_out_of_memory_error" (-> <any> <native-bool>) nocapture))
    (define raise-out-of-memory-error (world-function llerror "llerror_raise_out_of_memory_error" (-> <string> <any> * <unit>) noreturn))
    (define invalid-argument-error? (native-function llerror "llerror_is_invalid_argument_error" (-> <any> <native-bool>) nocapture))
    (define raise-invalid-argument-error (world-function llerror "llerror_raise_invalid_argument_error" (-> <string> <any> * <unit>) noreturn))
    (define integer-overflow-error? (native-function llerror "llerror_is_integer_overflow_error" (-> <any> <native-bool>) nocapture))
    (define raise-integer-overflow-error (world-function llerror "llerror_raise_integer_overflow_error" (-> <string> <any> * <unit>) noreturn))
    (define implementation-restriction-error? (native-function llerror "llerror_is_implementation_restriction_error" (-> <any> <native-bool>) nocapture))
    (define raise-implementation-restriction-error (world-function llerror "llerror_raise_implementation_restriction_error" (-> <string> <any> * <unit>) noreturn))
    (define unclonable-value-error? (native-function llerror "llerror_is_unclonable_value_error" (-> <any> <native-bool>) nocapture))
    (define raise-unclonable-value-error (world-function llerror "llerror_raise_unclonable_value_error" (-> <string> <any> * <unit>) noreturn))
    (define no-actor-error? (native-function llerror "llerror_is_no_actor_error" (-> <any> <native-bool>) nocapture))
    (define raise-no-actor-error (world-function llerror "llerror_raise_no_actor_error" (-> <string> <any> * <unit>) noreturn))
    (define expired-escape-procedure-error? (native-function llerror "llerror_is_expired_escape_procedure_error" (-> <any> <native-bool>) nocapture))
    (define raise-expired-escape-procedure-error (world-function llerror "llerror_raise_expired_escape_procedure_error" (-> <string> <any> * <unit>) noreturn))
    (define ask-timeout-error? (native-function llerror "llerror_is_ask_timeout_error" (-> <any> <native-bool>) nocapture))
    (define raise-ask-timeout-error (world-function llerror "llerror_raise_ask_timeout_error" (-> <string> <any> * <unit>) noreturn))
    (define match-error? (native-function llerror "llerror_is_match_error" (-> <any> <native-bool>) nocapture))
    (define raise-match-error (world-function llerror "llerror_raise_match_error" (-> <string> <any> * <unit>) noreturn))
))
